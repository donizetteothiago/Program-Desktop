#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mercearia.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bdMercearia")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFornecedor(Fornecedor instance);
    partial void UpdateFornecedor(Fornecedor instance);
    partial void DeleteFornecedor(Fornecedor instance);
    partial void InsertItens_nota(Itens_nota instance);
    partial void UpdateItens_nota(Itens_nota instance);
    partial void DeleteItens_nota(Itens_nota instance);
    partial void InsertItens_venda(Itens_venda instance);
    partial void UpdateItens_venda(Itens_venda instance);
    partial void DeleteItens_venda(Itens_venda instance);
    partial void InsertLote(Lote instance);
    partial void UpdateLote(Lote instance);
    partial void DeleteLote(Lote instance);
    partial void InsertNota_fiscal(Nota_fiscal instance);
    partial void UpdateNota_fiscal(Nota_fiscal instance);
    partial void DeleteNota_fiscal(Nota_fiscal instance);
    partial void InsertOperador(Operador instance);
    partial void UpdateOperador(Operador instance);
    partial void DeleteOperador(Operador instance);
    partial void InsertProduto(Produto instance);
    partial void UpdateProduto(Produto instance);
    partial void DeleteProduto(Produto instance);
    partial void InsertTipo_produto(Tipo_produto instance);
    partial void UpdateTipo_produto(Tipo_produto instance);
    partial void DeleteTipo_produto(Tipo_produto instance);
    partial void InsertVenda(Venda instance);
    partial void UpdateVenda(Venda instance);
    partial void DeleteVenda(Venda instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Mercearia.Model.Properties.Settings.Default.bdMerceariaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Fornecedor> Fornecedors
		{
			get
			{
				return this.GetTable<Fornecedor>();
			}
		}
		
		public System.Data.Linq.Table<Itens_nota> Itens_notas
		{
			get
			{
				return this.GetTable<Itens_nota>();
			}
		}
		
		public System.Data.Linq.Table<Itens_venda> Itens_vendas
		{
			get
			{
				return this.GetTable<Itens_venda>();
			}
		}
		
		public System.Data.Linq.Table<Lote> Lotes
		{
			get
			{
				return this.GetTable<Lote>();
			}
		}
		
		public System.Data.Linq.Table<Nota_fiscal> Nota_fiscals
		{
			get
			{
				return this.GetTable<Nota_fiscal>();
			}
		}
		
		public System.Data.Linq.Table<Operador> Operadors
		{
			get
			{
				return this.GetTable<Operador>();
			}
		}
		
		public System.Data.Linq.Table<Produto> Produtos
		{
			get
			{
				return this.GetTable<Produto>();
			}
		}
		
		public System.Data.Linq.Table<Tipo_produto> Tipo_produtos
		{
			get
			{
				return this.GetTable<Tipo_produto>();
			}
		}
		
		public System.Data.Linq.Table<Venda> Vendas
		{
			get
			{
				return this.GetTable<Venda>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fornecedor")]
	public partial class Fornecedor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_fornecedor;
		
		private string _Nome;
		
		private string _CNPJ;
		
		private string _Insc_estadual;
		
		private string _Nome_fantasia;
		
		private string _Tel_fixo;
		
		private string _Tel_celular;
		
		private string _Logradouro;
		
		private string _Bairro;
		
		private string _Cidade;
		
		private string _UF;
		
		private string _CEP;
		
		private EntitySet<Lote> _Lotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_fornecedorChanging(int value);
    partial void OnCod_fornecedorChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCNPJChanging(string value);
    partial void OnCNPJChanged();
    partial void OnInsc_estadualChanging(string value);
    partial void OnInsc_estadualChanged();
    partial void OnNome_fantasiaChanging(string value);
    partial void OnNome_fantasiaChanged();
    partial void OnTel_fixoChanging(string value);
    partial void OnTel_fixoChanged();
    partial void OnTel_celularChanging(string value);
    partial void OnTel_celularChanged();
    partial void OnLogradouroChanging(string value);
    partial void OnLogradouroChanged();
    partial void OnBairroChanging(string value);
    partial void OnBairroChanged();
    partial void OnCidadeChanging(string value);
    partial void OnCidadeChanged();
    partial void OnUFChanging(string value);
    partial void OnUFChanged();
    partial void OnCEPChanging(string value);
    partial void OnCEPChanged();
    #endregion
		
		public Fornecedor()
		{
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_fornecedor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_fornecedor
		{
			get
			{
				return this._Cod_fornecedor;
			}
			set
			{
				if ((this._Cod_fornecedor != value))
				{
					this.OnCod_fornecedorChanging(value);
					this.SendPropertyChanging();
					this._Cod_fornecedor = value;
					this.SendPropertyChanged("Cod_fornecedor");
					this.OnCod_fornecedorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNPJ", DbType="Char(14) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CNPJ
		{
			get
			{
				return this._CNPJ;
			}
			set
			{
				if ((this._CNPJ != value))
				{
					this.OnCNPJChanging(value);
					this.SendPropertyChanging();
					this._CNPJ = value;
					this.SendPropertyChanged("CNPJ");
					this.OnCNPJChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Insc_estadual", DbType="Char(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Insc_estadual
		{
			get
			{
				return this._Insc_estadual;
			}
			set
			{
				if ((this._Insc_estadual != value))
				{
					this.OnInsc_estadualChanging(value);
					this.SendPropertyChanging();
					this._Insc_estadual = value;
					this.SendPropertyChanged("Insc_estadual");
					this.OnInsc_estadualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome_fantasia", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome_fantasia
		{
			get
			{
				return this._Nome_fantasia;
			}
			set
			{
				if ((this._Nome_fantasia != value))
				{
					this.OnNome_fantasiaChanging(value);
					this.SendPropertyChanging();
					this._Nome_fantasia = value;
					this.SendPropertyChanged("Nome_fantasia");
					this.OnNome_fantasiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel_fixo", DbType="Char(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Tel_fixo
		{
			get
			{
				return this._Tel_fixo;
			}
			set
			{
				if ((this._Tel_fixo != value))
				{
					this.OnTel_fixoChanging(value);
					this.SendPropertyChanging();
					this._Tel_fixo = value;
					this.SendPropertyChanged("Tel_fixo");
					this.OnTel_fixoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel_celular", DbType="Char(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Tel_celular
		{
			get
			{
				return this._Tel_celular;
			}
			set
			{
				if ((this._Tel_celular != value))
				{
					this.OnTel_celularChanging(value);
					this.SendPropertyChanging();
					this._Tel_celular = value;
					this.SendPropertyChanged("Tel_celular");
					this.OnTel_celularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logradouro", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Logradouro
		{
			get
			{
				return this._Logradouro;
			}
			set
			{
				if ((this._Logradouro != value))
				{
					this.OnLogradouroChanging(value);
					this.SendPropertyChanging();
					this._Logradouro = value;
					this.SendPropertyChanged("Logradouro");
					this.OnLogradouroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bairro", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Bairro
		{
			get
			{
				return this._Bairro;
			}
			set
			{
				if ((this._Bairro != value))
				{
					this.OnBairroChanging(value);
					this.SendPropertyChanging();
					this._Bairro = value;
					this.SendPropertyChanged("Bairro");
					this.OnBairroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cidade", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Cidade
		{
			get
			{
				return this._Cidade;
			}
			set
			{
				if ((this._Cidade != value))
				{
					this.OnCidadeChanging(value);
					this.SendPropertyChanging();
					this._Cidade = value;
					this.SendPropertyChanged("Cidade");
					this.OnCidadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UF", DbType="Char(2)", UpdateCheck=UpdateCheck.Never)]
		public string UF
		{
			get
			{
				return this._UF;
			}
			set
			{
				if ((this._UF != value))
				{
					this.OnUFChanging(value);
					this.SendPropertyChanging();
					this._UF = value;
					this.SendPropertyChanged("UF");
					this.OnUFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEP", DbType="Char(8)", UpdateCheck=UpdateCheck.Never)]
		public string CEP
		{
			get
			{
				return this._CEP;
			}
			set
			{
				if ((this._CEP != value))
				{
					this.OnCEPChanging(value);
					this.SendPropertyChanging();
					this._CEP = value;
					this.SendPropertyChanged("CEP");
					this.OnCEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fornecedor_Lote", Storage="_Lotes", ThisKey="Cod_fornecedor", OtherKey="Cod_fornecedor")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Fornecedor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Itens_nota")]
	public partial class Itens_nota : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_nota;
		
		private int _Cod_venda;
		
		private EntityRef<Itens_venda> _Itens_venda;
		
		private EntityRef<Nota_fiscal> _Nota_fiscal;
		
		private EntityRef<Nota_fiscal> _Nota_fiscal1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_notaChanging(int value);
    partial void OnCod_notaChanged();
    partial void OnCod_vendaChanging(int value);
    partial void OnCod_vendaChanged();
    #endregion
		
		public Itens_nota()
		{
			this._Itens_venda = default(EntityRef<Itens_venda>);
			this._Nota_fiscal = default(EntityRef<Nota_fiscal>);
			this._Nota_fiscal1 = default(EntityRef<Nota_fiscal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_nota", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_nota
		{
			get
			{
				return this._Cod_nota;
			}
			set
			{
				if ((this._Cod_nota != value))
				{
					if ((this._Nota_fiscal.HasLoadedOrAssignedValue || this._Nota_fiscal1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_notaChanging(value);
					this.SendPropertyChanging();
					this._Cod_nota = value;
					this.SendPropertyChanged("Cod_nota");
					this.OnCod_notaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_venda", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_venda
		{
			get
			{
				return this._Cod_venda;
			}
			set
			{
				if ((this._Cod_venda != value))
				{
					if (this._Itens_venda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_vendaChanging(value);
					this.SendPropertyChanging();
					this._Cod_venda = value;
					this.SendPropertyChanged("Cod_venda");
					this.OnCod_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Itens_venda_Itens_nota", Storage="_Itens_venda", ThisKey="Cod_venda", OtherKey="Cod_venda", IsForeignKey=true)]
		public Itens_venda Itens_venda
		{
			get
			{
				return this._Itens_venda.Entity;
			}
			set
			{
				Itens_venda previousValue = this._Itens_venda.Entity;
				if (((previousValue != value) 
							|| (this._Itens_venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Itens_venda.Entity = null;
						previousValue.Itens_notas.Remove(this);
					}
					this._Itens_venda.Entity = value;
					if ((value != null))
					{
						value.Itens_notas.Add(this);
						this._Cod_venda = value.Cod_venda;
					}
					else
					{
						this._Cod_venda = default(int);
					}
					this.SendPropertyChanged("Itens_venda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nota_fiscal_Itens_nota", Storage="_Nota_fiscal", ThisKey="Cod_nota", OtherKey="Cod_nota", IsForeignKey=true)]
		public Nota_fiscal Nota_fiscal
		{
			get
			{
				return this._Nota_fiscal.Entity;
			}
			set
			{
				Nota_fiscal previousValue = this._Nota_fiscal.Entity;
				if (((previousValue != value) 
							|| (this._Nota_fiscal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nota_fiscal.Entity = null;
						previousValue.Itens_notas.Remove(this);
					}
					this._Nota_fiscal.Entity = value;
					if ((value != null))
					{
						value.Itens_notas.Add(this);
						this._Cod_nota = value.Cod_nota;
					}
					else
					{
						this._Cod_nota = default(int);
					}
					this.SendPropertyChanged("Nota_fiscal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nota_fiscal_Itens_nota1", Storage="_Nota_fiscal1", ThisKey="Cod_nota", OtherKey="Cod_nota", IsForeignKey=true)]
		public Nota_fiscal Nota_fiscal1
		{
			get
			{
				return this._Nota_fiscal1.Entity;
			}
			set
			{
				Nota_fiscal previousValue = this._Nota_fiscal1.Entity;
				if (((previousValue != value) 
							|| (this._Nota_fiscal1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nota_fiscal1.Entity = null;
						previousValue.Itens_notas1.Remove(this);
					}
					this._Nota_fiscal1.Entity = value;
					if ((value != null))
					{
						value.Itens_notas1.Add(this);
						this._Cod_nota = value.Cod_nota;
					}
					else
					{
						this._Cod_nota = default(int);
					}
					this.SendPropertyChanged("Nota_fiscal1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Itens_venda")]
	public partial class Itens_venda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_venda;
		
		private int _Cod_produto;
		
		private string _Nome;
		
		private int _Quantidade;
		
		private decimal _Valor_venda;
		
		private decimal _Valor_total_produto;
		
		private EntitySet<Itens_nota> _Itens_notas;
		
		private EntityRef<Produto> _Produto;
		
		private EntityRef<Venda> _Venda;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_vendaChanging(int value);
    partial void OnCod_vendaChanged();
    partial void OnCod_produtoChanging(int value);
    partial void OnCod_produtoChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnQuantidadeChanging(int value);
    partial void OnQuantidadeChanged();
    partial void OnValor_vendaChanging(decimal value);
    partial void OnValor_vendaChanged();
    partial void OnValor_total_produtoChanging(decimal value);
    partial void OnValor_total_produtoChanged();
    #endregion
		
		public Itens_venda()
		{
			this._Itens_notas = new EntitySet<Itens_nota>(new Action<Itens_nota>(this.attach_Itens_notas), new Action<Itens_nota>(this.detach_Itens_notas));
			this._Produto = default(EntityRef<Produto>);
			this._Venda = default(EntityRef<Venda>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_venda", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_venda
		{
			get
			{
				return this._Cod_venda;
			}
			set
			{
				if ((this._Cod_venda != value))
				{
					if (this._Venda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_vendaChanging(value);
					this.SendPropertyChanging();
					this._Cod_venda = value;
					this.SendPropertyChanged("Cod_venda");
					this.OnCod_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_produto", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_produto
		{
			get
			{
				return this._Cod_produto;
			}
			set
			{
				if ((this._Cod_produto != value))
				{
					if (this._Produto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_produtoChanging(value);
					this.SendPropertyChanging();
					this._Cod_produto = value;
					this.SendPropertyChanged("Cod_produto");
					this.OnCod_produtoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantidade", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Quantidade
		{
			get
			{
				return this._Quantidade;
			}
			set
			{
				if ((this._Quantidade != value))
				{
					this.OnQuantidadeChanging(value);
					this.SendPropertyChanging();
					this._Quantidade = value;
					this.SendPropertyChanged("Quantidade");
					this.OnQuantidadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_venda", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Valor_venda
		{
			get
			{
				return this._Valor_venda;
			}
			set
			{
				if ((this._Valor_venda != value))
				{
					this.OnValor_vendaChanging(value);
					this.SendPropertyChanging();
					this._Valor_venda = value;
					this.SendPropertyChanged("Valor_venda");
					this.OnValor_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_total_produto", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Valor_total_produto
		{
			get
			{
				return this._Valor_total_produto;
			}
			set
			{
				if ((this._Valor_total_produto != value))
				{
					this.OnValor_total_produtoChanging(value);
					this.SendPropertyChanging();
					this._Valor_total_produto = value;
					this.SendPropertyChanged("Valor_total_produto");
					this.OnValor_total_produtoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Itens_venda_Itens_nota", Storage="_Itens_notas", ThisKey="Cod_venda", OtherKey="Cod_venda")]
		public EntitySet<Itens_nota> Itens_notas
		{
			get
			{
				return this._Itens_notas;
			}
			set
			{
				this._Itens_notas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produto_Itens_venda", Storage="_Produto", ThisKey="Cod_produto", OtherKey="Cod_produto", IsForeignKey=true)]
		public Produto Produto
		{
			get
			{
				return this._Produto.Entity;
			}
			set
			{
				Produto previousValue = this._Produto.Entity;
				if (((previousValue != value) 
							|| (this._Produto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Produto.Entity = null;
						previousValue.Itens_vendas.Remove(this);
					}
					this._Produto.Entity = value;
					if ((value != null))
					{
						value.Itens_vendas.Add(this);
						this._Cod_produto = value.Cod_produto;
					}
					else
					{
						this._Cod_produto = default(int);
					}
					this.SendPropertyChanged("Produto");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venda_Itens_venda", Storage="_Venda", ThisKey="Cod_venda", OtherKey="Cod_venda", IsForeignKey=true)]
		public Venda Venda
		{
			get
			{
				return this._Venda.Entity;
			}
			set
			{
				Venda previousValue = this._Venda.Entity;
				if (((previousValue != value) 
							|| (this._Venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venda.Entity = null;
						previousValue.Itens_venda = null;
					}
					this._Venda.Entity = value;
					if ((value != null))
					{
						value.Itens_venda = this;
						this._Cod_venda = value.Cod_venda;
					}
					else
					{
						this._Cod_venda = default(int);
					}
					this.SendPropertyChanged("Venda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Itens_notas(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Itens_venda = this;
		}
		
		private void detach_Itens_notas(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Itens_venda = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lote")]
	public partial class Lote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_lote;
		
		private int _Cod_fornecedor;
		
		private string _Nome;
		
		private System.DateTime _Data_entrada;
		
		private decimal _Valor_total_lote;
		
		private string _Prazo_validade;
		
		private bool _Quantidade;
		
		private int _Cod_tipo;
		
		private EntitySet<Produto> _Produtos;
		
		private EntityRef<Fornecedor> _Fornecedor;
		
		private EntityRef<Tipo_produto> _Tipo_produto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_loteChanging(int value);
    partial void OnCod_loteChanged();
    partial void OnCod_fornecedorChanging(int value);
    partial void OnCod_fornecedorChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnData_entradaChanging(System.DateTime value);
    partial void OnData_entradaChanged();
    partial void OnValor_total_loteChanging(decimal value);
    partial void OnValor_total_loteChanged();
    partial void OnPrazo_validadeChanging(string value);
    partial void OnPrazo_validadeChanged();
    partial void OnQuantidadeChanging(bool value);
    partial void OnQuantidadeChanged();
    partial void OnCod_tipoChanging(int value);
    partial void OnCod_tipoChanged();
    #endregion
		
		public Lote()
		{
			this._Produtos = new EntitySet<Produto>(new Action<Produto>(this.attach_Produtos), new Action<Produto>(this.detach_Produtos));
			this._Fornecedor = default(EntityRef<Fornecedor>);
			this._Tipo_produto = default(EntityRef<Tipo_produto>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_lote", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_lote
		{
			get
			{
				return this._Cod_lote;
			}
			set
			{
				if ((this._Cod_lote != value))
				{
					this.OnCod_loteChanging(value);
					this.SendPropertyChanging();
					this._Cod_lote = value;
					this.SendPropertyChanged("Cod_lote");
					this.OnCod_loteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_fornecedor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Cod_fornecedor
		{
			get
			{
				return this._Cod_fornecedor;
			}
			set
			{
				if ((this._Cod_fornecedor != value))
				{
					if (this._Fornecedor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_fornecedorChanging(value);
					this.SendPropertyChanging();
					this._Cod_fornecedor = value;
					this.SendPropertyChanged("Cod_fornecedor");
					this.OnCod_fornecedorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_entrada", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_entrada
		{
			get
			{
				return this._Data_entrada;
			}
			set
			{
				if ((this._Data_entrada != value))
				{
					this.OnData_entradaChanging(value);
					this.SendPropertyChanging();
					this._Data_entrada = value;
					this.SendPropertyChanged("Data_entrada");
					this.OnData_entradaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_total_lote", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Valor_total_lote
		{
			get
			{
				return this._Valor_total_lote;
			}
			set
			{
				if ((this._Valor_total_lote != value))
				{
					this.OnValor_total_loteChanging(value);
					this.SendPropertyChanging();
					this._Valor_total_lote = value;
					this.SendPropertyChanged("Valor_total_lote");
					this.OnValor_total_loteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prazo_validade", DbType="Char(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Prazo_validade
		{
			get
			{
				return this._Prazo_validade;
			}
			set
			{
				if ((this._Prazo_validade != value))
				{
					this.OnPrazo_validadeChanging(value);
					this.SendPropertyChanging();
					this._Prazo_validade = value;
					this.SendPropertyChanged("Prazo_validade");
					this.OnPrazo_validadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantidade", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Quantidade
		{
			get
			{
				return this._Quantidade;
			}
			set
			{
				if ((this._Quantidade != value))
				{
					this.OnQuantidadeChanging(value);
					this.SendPropertyChanging();
					this._Quantidade = value;
					this.SendPropertyChanged("Quantidade");
					this.OnQuantidadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_tipo", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_tipo
		{
			get
			{
				return this._Cod_tipo;
			}
			set
			{
				if ((this._Cod_tipo != value))
				{
					if (this._Tipo_produto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_tipoChanging(value);
					this.SendPropertyChanging();
					this._Cod_tipo = value;
					this.SendPropertyChanged("Cod_tipo");
					this.OnCod_tipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lote_Produto", Storage="_Produtos", ThisKey="Cod_lote", OtherKey="Cod_lote")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._Produtos;
			}
			set
			{
				this._Produtos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fornecedor_Lote", Storage="_Fornecedor", ThisKey="Cod_fornecedor", OtherKey="Cod_fornecedor", IsForeignKey=true)]
		public Fornecedor Fornecedor
		{
			get
			{
				return this._Fornecedor.Entity;
			}
			set
			{
				Fornecedor previousValue = this._Fornecedor.Entity;
				if (((previousValue != value) 
							|| (this._Fornecedor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fornecedor.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Fornecedor.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._Cod_fornecedor = value.Cod_fornecedor;
					}
					else
					{
						this._Cod_fornecedor = default(int);
					}
					this.SendPropertyChanged("Fornecedor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_produto_Lote", Storage="_Tipo_produto", ThisKey="Cod_tipo", OtherKey="Cod_tipo", IsForeignKey=true)]
		public Tipo_produto Tipo_produto
		{
			get
			{
				return this._Tipo_produto.Entity;
			}
			set
			{
				Tipo_produto previousValue = this._Tipo_produto.Entity;
				if (((previousValue != value) 
							|| (this._Tipo_produto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo_produto.Entity = null;
						previousValue.Lotes.Remove(this);
					}
					this._Tipo_produto.Entity = value;
					if ((value != null))
					{
						value.Lotes.Add(this);
						this._Cod_tipo = value.Cod_tipo;
					}
					else
					{
						this._Cod_tipo = default(int);
					}
					this.SendPropertyChanged("Tipo_produto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Lote = this;
		}
		
		private void detach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Lote = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nota_fiscal")]
	public partial class Nota_fiscal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_nota;
		
		private System.DateTime _Data_emissão_nota;
		
		private int _Cod_venda;
		
		private EntitySet<Itens_nota> _Itens_notas;
		
		private EntitySet<Itens_nota> _Itens_notas1;
		
		private EntityRef<Venda> _Venda;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_notaChanging(int value);
    partial void OnCod_notaChanged();
    partial void OnData_emissão_notaChanging(System.DateTime value);
    partial void OnData_emissão_notaChanged();
    partial void OnCod_vendaChanging(int value);
    partial void OnCod_vendaChanged();
    #endregion
		
		public Nota_fiscal()
		{
			this._Itens_notas = new EntitySet<Itens_nota>(new Action<Itens_nota>(this.attach_Itens_notas), new Action<Itens_nota>(this.detach_Itens_notas));
			this._Itens_notas1 = new EntitySet<Itens_nota>(new Action<Itens_nota>(this.attach_Itens_notas1), new Action<Itens_nota>(this.detach_Itens_notas1));
			this._Venda = default(EntityRef<Venda>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_nota", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_nota
		{
			get
			{
				return this._Cod_nota;
			}
			set
			{
				if ((this._Cod_nota != value))
				{
					this.OnCod_notaChanging(value);
					this.SendPropertyChanging();
					this._Cod_nota = value;
					this.SendPropertyChanged("Cod_nota");
					this.OnCod_notaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_emissão_nota", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_emissão_nota
		{
			get
			{
				return this._Data_emissão_nota;
			}
			set
			{
				if ((this._Data_emissão_nota != value))
				{
					this.OnData_emissão_notaChanging(value);
					this.SendPropertyChanging();
					this._Data_emissão_nota = value;
					this.SendPropertyChanged("Data_emissão_nota");
					this.OnData_emissão_notaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_venda", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_venda
		{
			get
			{
				return this._Cod_venda;
			}
			set
			{
				if ((this._Cod_venda != value))
				{
					if (this._Venda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_vendaChanging(value);
					this.SendPropertyChanging();
					this._Cod_venda = value;
					this.SendPropertyChanged("Cod_venda");
					this.OnCod_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nota_fiscal_Itens_nota", Storage="_Itens_notas", ThisKey="Cod_nota", OtherKey="Cod_nota")]
		public EntitySet<Itens_nota> Itens_notas
		{
			get
			{
				return this._Itens_notas;
			}
			set
			{
				this._Itens_notas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nota_fiscal_Itens_nota1", Storage="_Itens_notas1", ThisKey="Cod_nota", OtherKey="Cod_nota")]
		public EntitySet<Itens_nota> Itens_notas1
		{
			get
			{
				return this._Itens_notas1;
			}
			set
			{
				this._Itens_notas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venda_Nota_fiscal", Storage="_Venda", ThisKey="Cod_venda", OtherKey="Cod_venda", IsForeignKey=true)]
		public Venda Venda
		{
			get
			{
				return this._Venda.Entity;
			}
			set
			{
				Venda previousValue = this._Venda.Entity;
				if (((previousValue != value) 
							|| (this._Venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venda.Entity = null;
						previousValue.Nota_fiscals.Remove(this);
					}
					this._Venda.Entity = value;
					if ((value != null))
					{
						value.Nota_fiscals.Add(this);
						this._Cod_venda = value.Cod_venda;
					}
					else
					{
						this._Cod_venda = default(int);
					}
					this.SendPropertyChanged("Venda");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Itens_notas(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Nota_fiscal = this;
		}
		
		private void detach_Itens_notas(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Nota_fiscal = null;
		}
		
		private void attach_Itens_notas1(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Nota_fiscal1 = this;
		}
		
		private void detach_Itens_notas1(Itens_nota entity)
		{
			this.SendPropertyChanging();
			entity.Nota_fiscal1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operador")]
	public partial class Operador : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_op;
		
		private string _Nome;
		
		private string _Cargo;
		
		private string _Telefone_celular;
		
		private System.DateTime _Data_nascimento;
		
		private System.DateTime _Data_admissão;
		
		private string _CPF;
		
		private string _Loguin;
		
		private string _Senha;
		
		private string _Logradouro;
		
		private string _Bairro;
		
		private string _Cidade;
		
		private string _UF;
		
		private string _CEP;
		
		private string _Telefone_fixo;
		
		private EntitySet<Venda> _Vendas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_opChanging(int value);
    partial void OnCod_opChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCargoChanging(string value);
    partial void OnCargoChanged();
    partial void OnTelefone_celularChanging(string value);
    partial void OnTelefone_celularChanged();
    partial void OnData_nascimentoChanging(System.DateTime value);
    partial void OnData_nascimentoChanged();
    partial void OnData_admissãoChanging(System.DateTime value);
    partial void OnData_admissãoChanged();
    partial void OnCPFChanging(string value);
    partial void OnCPFChanged();
    partial void OnLoguinChanging(string value);
    partial void OnLoguinChanged();
    partial void OnSenhaChanging(string value);
    partial void OnSenhaChanged();
    partial void OnLogradouroChanging(string value);
    partial void OnLogradouroChanged();
    partial void OnBairroChanging(string value);
    partial void OnBairroChanged();
    partial void OnCidadeChanging(string value);
    partial void OnCidadeChanged();
    partial void OnUFChanging(string value);
    partial void OnUFChanged();
    partial void OnCEPChanging(string value);
    partial void OnCEPChanged();
    partial void OnTelefone_fixoChanging(string value);
    partial void OnTelefone_fixoChanged();
    #endregion
		
		public Operador()
		{
			this._Vendas = new EntitySet<Venda>(new Action<Venda>(this.attach_Vendas), new Action<Venda>(this.detach_Vendas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_op", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_op
		{
			get
			{
				return this._Cod_op;
			}
			set
			{
				if ((this._Cod_op != value))
				{
					this.OnCod_opChanging(value);
					this.SendPropertyChanging();
					this._Cod_op = value;
					this.SendPropertyChanged("Cod_op");
					this.OnCod_opChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cargo", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Cargo
		{
			get
			{
				return this._Cargo;
			}
			set
			{
				if ((this._Cargo != value))
				{
					this.OnCargoChanging(value);
					this.SendPropertyChanging();
					this._Cargo = value;
					this.SendPropertyChanged("Cargo");
					this.OnCargoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefone_celular", DbType="Char(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Telefone_celular
		{
			get
			{
				return this._Telefone_celular;
			}
			set
			{
				if ((this._Telefone_celular != value))
				{
					this.OnTelefone_celularChanging(value);
					this.SendPropertyChanging();
					this._Telefone_celular = value;
					this.SendPropertyChanged("Telefone_celular");
					this.OnTelefone_celularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_nascimento", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_nascimento
		{
			get
			{
				return this._Data_nascimento;
			}
			set
			{
				if ((this._Data_nascimento != value))
				{
					this.OnData_nascimentoChanging(value);
					this.SendPropertyChanging();
					this._Data_nascimento = value;
					this.SendPropertyChanged("Data_nascimento");
					this.OnData_nascimentoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_admissão", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_admissão
		{
			get
			{
				return this._Data_admissão;
			}
			set
			{
				if ((this._Data_admissão != value))
				{
					this.OnData_admissãoChanging(value);
					this.SendPropertyChanging();
					this._Data_admissão = value;
					this.SendPropertyChanged("Data_admissão");
					this.OnData_admissãoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPF", DbType="Char(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CPF
		{
			get
			{
				return this._CPF;
			}
			set
			{
				if ((this._CPF != value))
				{
					this.OnCPFChanging(value);
					this.SendPropertyChanging();
					this._CPF = value;
					this.SendPropertyChanged("CPF");
					this.OnCPFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loguin", DbType="Char(11) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Loguin
		{
			get
			{
				return this._Loguin;
			}
			set
			{
				if ((this._Loguin != value))
				{
					this.OnLoguinChanging(value);
					this.SendPropertyChanging();
					this._Loguin = value;
					this.SendPropertyChanged("Loguin");
					this.OnLoguinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Senha", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Senha
		{
			get
			{
				return this._Senha;
			}
			set
			{
				if ((this._Senha != value))
				{
					this.OnSenhaChanging(value);
					this.SendPropertyChanging();
					this._Senha = value;
					this.SendPropertyChanged("Senha");
					this.OnSenhaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logradouro", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Logradouro
		{
			get
			{
				return this._Logradouro;
			}
			set
			{
				if ((this._Logradouro != value))
				{
					this.OnLogradouroChanging(value);
					this.SendPropertyChanging();
					this._Logradouro = value;
					this.SendPropertyChanged("Logradouro");
					this.OnLogradouroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bairro", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Bairro
		{
			get
			{
				return this._Bairro;
			}
			set
			{
				if ((this._Bairro != value))
				{
					this.OnBairroChanging(value);
					this.SendPropertyChanging();
					this._Bairro = value;
					this.SendPropertyChanged("Bairro");
					this.OnBairroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cidade", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Cidade
		{
			get
			{
				return this._Cidade;
			}
			set
			{
				if ((this._Cidade != value))
				{
					this.OnCidadeChanging(value);
					this.SendPropertyChanging();
					this._Cidade = value;
					this.SendPropertyChanged("Cidade");
					this.OnCidadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UF", DbType="Char(2)", UpdateCheck=UpdateCheck.Never)]
		public string UF
		{
			get
			{
				return this._UF;
			}
			set
			{
				if ((this._UF != value))
				{
					this.OnUFChanging(value);
					this.SendPropertyChanging();
					this._UF = value;
					this.SendPropertyChanged("UF");
					this.OnUFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CEP", DbType="Char(8)", UpdateCheck=UpdateCheck.Never)]
		public string CEP
		{
			get
			{
				return this._CEP;
			}
			set
			{
				if ((this._CEP != value))
				{
					this.OnCEPChanging(value);
					this.SendPropertyChanging();
					this._CEP = value;
					this.SendPropertyChanged("CEP");
					this.OnCEPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefone_fixo", DbType="Char(11)", UpdateCheck=UpdateCheck.Never)]
		public string Telefone_fixo
		{
			get
			{
				return this._Telefone_fixo;
			}
			set
			{
				if ((this._Telefone_fixo != value))
				{
					this.OnTelefone_fixoChanging(value);
					this.SendPropertyChanging();
					this._Telefone_fixo = value;
					this.SendPropertyChanged("Telefone_fixo");
					this.OnTelefone_fixoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operador_Venda", Storage="_Vendas", ThisKey="Cod_op", OtherKey="Cod_op")]
		public EntitySet<Venda> Vendas
		{
			get
			{
				return this._Vendas;
			}
			set
			{
				this._Vendas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Operador = this;
		}
		
		private void detach_Vendas(Venda entity)
		{
			this.SendPropertyChanging();
			entity.Operador = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Produto")]
	public partial class Produto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_produto;
		
		private string _Nome;
		
		private System.DateTime _Data_entrada;
		
		private string _Peso;
		
		private System.Nullable<decimal> _Valor_compra;
		
		private System.Nullable<decimal> _Valor_venda;
		
		private int _Cod_tipo;
		
		private int _Cod_lote;
		
		private EntitySet<Itens_venda> _Itens_vendas;
		
		private EntityRef<Lote> _Lote;
		
		private EntityRef<Tipo_produto> _Tipo_produto;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_produtoChanging(int value);
    partial void OnCod_produtoChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnData_entradaChanging(System.DateTime value);
    partial void OnData_entradaChanged();
    partial void OnPesoChanging(string value);
    partial void OnPesoChanged();
    partial void OnValor_compraChanging(System.Nullable<decimal> value);
    partial void OnValor_compraChanged();
    partial void OnValor_vendaChanging(System.Nullable<decimal> value);
    partial void OnValor_vendaChanged();
    partial void OnCod_tipoChanging(int value);
    partial void OnCod_tipoChanged();
    partial void OnCod_loteChanging(int value);
    partial void OnCod_loteChanged();
    #endregion
		
		public Produto()
		{
			this._Itens_vendas = new EntitySet<Itens_venda>(new Action<Itens_venda>(this.attach_Itens_vendas), new Action<Itens_venda>(this.detach_Itens_vendas));
			this._Lote = default(EntityRef<Lote>);
			this._Tipo_produto = default(EntityRef<Tipo_produto>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_produto", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_produto
		{
			get
			{
				return this._Cod_produto;
			}
			set
			{
				if ((this._Cod_produto != value))
				{
					this.OnCod_produtoChanging(value);
					this.SendPropertyChanging();
					this._Cod_produto = value;
					this.SendPropertyChanged("Cod_produto");
					this.OnCod_produtoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_entrada", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_entrada
		{
			get
			{
				return this._Data_entrada;
			}
			set
			{
				if ((this._Data_entrada != value))
				{
					this.OnData_entradaChanging(value);
					this.SendPropertyChanging();
					this._Data_entrada = value;
					this.SendPropertyChanged("Data_entrada");
					this.OnData_entradaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Peso", DbType="Char(5)", UpdateCheck=UpdateCheck.Never)]
		public string Peso
		{
			get
			{
				return this._Peso;
			}
			set
			{
				if ((this._Peso != value))
				{
					this.OnPesoChanging(value);
					this.SendPropertyChanging();
					this._Peso = value;
					this.SendPropertyChanged("Peso");
					this.OnPesoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_compra", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Valor_compra
		{
			get
			{
				return this._Valor_compra;
			}
			set
			{
				if ((this._Valor_compra != value))
				{
					this.OnValor_compraChanging(value);
					this.SendPropertyChanging();
					this._Valor_compra = value;
					this.SendPropertyChanged("Valor_compra");
					this.OnValor_compraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_venda", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Valor_venda
		{
			get
			{
				return this._Valor_venda;
			}
			set
			{
				if ((this._Valor_venda != value))
				{
					this.OnValor_vendaChanging(value);
					this.SendPropertyChanging();
					this._Valor_venda = value;
					this.SendPropertyChanged("Valor_venda");
					this.OnValor_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_tipo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Cod_tipo
		{
			get
			{
				return this._Cod_tipo;
			}
			set
			{
				if ((this._Cod_tipo != value))
				{
					if (this._Tipo_produto.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_tipoChanging(value);
					this.SendPropertyChanging();
					this._Cod_tipo = value;
					this.SendPropertyChanged("Cod_tipo");
					this.OnCod_tipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_lote", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_lote
		{
			get
			{
				return this._Cod_lote;
			}
			set
			{
				if ((this._Cod_lote != value))
				{
					if (this._Lote.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_loteChanging(value);
					this.SendPropertyChanging();
					this._Cod_lote = value;
					this.SendPropertyChanged("Cod_lote");
					this.OnCod_loteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produto_Itens_venda", Storage="_Itens_vendas", ThisKey="Cod_produto", OtherKey="Cod_produto")]
		public EntitySet<Itens_venda> Itens_vendas
		{
			get
			{
				return this._Itens_vendas;
			}
			set
			{
				this._Itens_vendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lote_Produto", Storage="_Lote", ThisKey="Cod_lote", OtherKey="Cod_lote", IsForeignKey=true)]
		public Lote Lote
		{
			get
			{
				return this._Lote.Entity;
			}
			set
			{
				Lote previousValue = this._Lote.Entity;
				if (((previousValue != value) 
							|| (this._Lote.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lote.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._Lote.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._Cod_lote = value.Cod_lote;
					}
					else
					{
						this._Cod_lote = default(int);
					}
					this.SendPropertyChanged("Lote");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_produto_Produto", Storage="_Tipo_produto", ThisKey="Cod_tipo", OtherKey="Cod_tipo", IsForeignKey=true)]
		public Tipo_produto Tipo_produto
		{
			get
			{
				return this._Tipo_produto.Entity;
			}
			set
			{
				Tipo_produto previousValue = this._Tipo_produto.Entity;
				if (((previousValue != value) 
							|| (this._Tipo_produto.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo_produto.Entity = null;
						previousValue.Produtos.Remove(this);
					}
					this._Tipo_produto.Entity = value;
					if ((value != null))
					{
						value.Produtos.Add(this);
						this._Cod_tipo = value.Cod_tipo;
					}
					else
					{
						this._Cod_tipo = default(int);
					}
					this.SendPropertyChanged("Tipo_produto");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Itens_vendas(Itens_venda entity)
		{
			this.SendPropertyChanging();
			entity.Produto = this;
		}
		
		private void detach_Itens_vendas(Itens_venda entity)
		{
			this.SendPropertyChanging();
			entity.Produto = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tipo_produto")]
	public partial class Tipo_produto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_tipo;
		
		private string _Nome;
		
		private string _Descrição;
		
		private EntitySet<Lote> _Lotes;
		
		private EntitySet<Produto> _Produtos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_tipoChanging(int value);
    partial void OnCod_tipoChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnDescriçãoChanging(string value);
    partial void OnDescriçãoChanged();
    #endregion
		
		public Tipo_produto()
		{
			this._Lotes = new EntitySet<Lote>(new Action<Lote>(this.attach_Lotes), new Action<Lote>(this.detach_Lotes));
			this._Produtos = new EntitySet<Produto>(new Action<Produto>(this.attach_Produtos), new Action<Produto>(this.detach_Produtos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_tipo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_tipo
		{
			get
			{
				return this._Cod_tipo;
			}
			set
			{
				if ((this._Cod_tipo != value))
				{
					this.OnCod_tipoChanging(value);
					this.SendPropertyChanging();
					this._Cod_tipo = value;
					this.SendPropertyChanged("Cod_tipo");
					this.OnCod_tipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descrição", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Descrição
		{
			get
			{
				return this._Descrição;
			}
			set
			{
				if ((this._Descrição != value))
				{
					this.OnDescriçãoChanging(value);
					this.SendPropertyChanging();
					this._Descrição = value;
					this.SendPropertyChanged("Descrição");
					this.OnDescriçãoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_produto_Lote", Storage="_Lotes", ThisKey="Cod_tipo", OtherKey="Cod_tipo")]
		public EntitySet<Lote> Lotes
		{
			get
			{
				return this._Lotes;
			}
			set
			{
				this._Lotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_produto_Produto", Storage="_Produtos", ThisKey="Cod_tipo", OtherKey="Cod_tipo")]
		public EntitySet<Produto> Produtos
		{
			get
			{
				return this._Produtos;
			}
			set
			{
				this._Produtos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_produto = this;
		}
		
		private void detach_Lotes(Lote entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_produto = null;
		}
		
		private void attach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_produto = this;
		}
		
		private void detach_Produtos(Produto entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_produto = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Venda")]
	public partial class Venda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cod_venda;
		
		private int _Cod_op;
		
		private System.DateTime _Data_venda;
		
		private decimal _Valor_total_venda;
		
		private EntityRef<Itens_venda> _Itens_venda;
		
		private EntitySet<Nota_fiscal> _Nota_fiscals;
		
		private EntityRef<Operador> _Operador;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCod_vendaChanging(int value);
    partial void OnCod_vendaChanged();
    partial void OnCod_opChanging(int value);
    partial void OnCod_opChanged();
    partial void OnData_vendaChanging(System.DateTime value);
    partial void OnData_vendaChanged();
    partial void OnValor_total_vendaChanging(decimal value);
    partial void OnValor_total_vendaChanged();
    #endregion
		
		public Venda()
		{
			this._Itens_venda = default(EntityRef<Itens_venda>);
			this._Nota_fiscals = new EntitySet<Nota_fiscal>(new Action<Nota_fiscal>(this.attach_Nota_fiscals), new Action<Nota_fiscal>(this.detach_Nota_fiscals));
			this._Operador = default(EntityRef<Operador>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_venda", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_venda
		{
			get
			{
				return this._Cod_venda;
			}
			set
			{
				if ((this._Cod_venda != value))
				{
					this.OnCod_vendaChanging(value);
					this.SendPropertyChanging();
					this._Cod_venda = value;
					this.SendPropertyChanged("Cod_venda");
					this.OnCod_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cod_op", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Cod_op
		{
			get
			{
				return this._Cod_op;
			}
			set
			{
				if ((this._Cod_op != value))
				{
					if (this._Operador.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCod_opChanging(value);
					this.SendPropertyChanging();
					this._Cod_op = value;
					this.SendPropertyChanged("Cod_op");
					this.OnCod_opChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data_venda", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Data_venda
		{
			get
			{
				return this._Data_venda;
			}
			set
			{
				if ((this._Data_venda != value))
				{
					this.OnData_vendaChanging(value);
					this.SendPropertyChanging();
					this._Data_venda = value;
					this.SendPropertyChanged("Data_venda");
					this.OnData_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor_total_venda", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Valor_total_venda
		{
			get
			{
				return this._Valor_total_venda;
			}
			set
			{
				if ((this._Valor_total_venda != value))
				{
					this.OnValor_total_vendaChanging(value);
					this.SendPropertyChanging();
					this._Valor_total_venda = value;
					this.SendPropertyChanged("Valor_total_venda");
					this.OnValor_total_vendaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venda_Itens_venda", Storage="_Itens_venda", ThisKey="Cod_venda", OtherKey="Cod_venda", IsUnique=true, IsForeignKey=false)]
		public Itens_venda Itens_venda
		{
			get
			{
				return this._Itens_venda.Entity;
			}
			set
			{
				Itens_venda previousValue = this._Itens_venda.Entity;
				if (((previousValue != value) 
							|| (this._Itens_venda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Itens_venda.Entity = null;
						previousValue.Venda = null;
					}
					this._Itens_venda.Entity = value;
					if ((value != null))
					{
						value.Venda = this;
					}
					this.SendPropertyChanged("Itens_venda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venda_Nota_fiscal", Storage="_Nota_fiscals", ThisKey="Cod_venda", OtherKey="Cod_venda")]
		public EntitySet<Nota_fiscal> Nota_fiscals
		{
			get
			{
				return this._Nota_fiscals;
			}
			set
			{
				this._Nota_fiscals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Operador_Venda", Storage="_Operador", ThisKey="Cod_op", OtherKey="Cod_op", IsForeignKey=true)]
		public Operador Operador
		{
			get
			{
				return this._Operador.Entity;
			}
			set
			{
				Operador previousValue = this._Operador.Entity;
				if (((previousValue != value) 
							|| (this._Operador.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operador.Entity = null;
						previousValue.Vendas.Remove(this);
					}
					this._Operador.Entity = value;
					if ((value != null))
					{
						value.Vendas.Add(this);
						this._Cod_op = value.Cod_op;
					}
					else
					{
						this._Cod_op = default(int);
					}
					this.SendPropertyChanged("Operador");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nota_fiscals(Nota_fiscal entity)
		{
			this.SendPropertyChanging();
			entity.Venda = this;
		}
		
		private void detach_Nota_fiscals(Nota_fiscal entity)
		{
			this.SendPropertyChanging();
			entity.Venda = null;
		}
	}
}
#pragma warning restore 1591
